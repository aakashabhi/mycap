#Checking Versions
import sys
print(sys.version)
import scipy
print(scipy.__version__)
import numpy
print(numpy.__version__)
import pandas
import sklearn
import matplotlib
print(pandas.__version__)
print(matplotlib.__version__)
print(sklearn.__version__)
#Importing ML Algorithms
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier
#Loading IRIS DataSet
url="https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names=['Sepal_Length','Sepal_Width','Petal_Length','Petal_width','Class']
dataset=pandas.read_csv(url,names=names)
print(dataset.head(20))
#Statistical Summary
print(dataset.describe())
#Class Distribution
print(dataset.groupby('Class').size())
#Univariate Plots to Understand Each Attribute -BoxWhiskerPlot
dataset.plot(kind='box',subplots=True,layout=(2,2),sharex=False,sharey=False)
pyplot.show()
#Histogram Plot
dataset.hist()
pyplot.show()
#Multivariate Plots
scatter_matrix(dataset)
pyplot.show()
#Creation of Validation Set(Train and Test Data)
array=dataset.values
X=array[:,0:4]
Y=array[:,4]
xtrain,xtest,ytrain,ytest=train_test_split(X,Y,test_size=0.2,random_state=1)
#Logistic Regression
#LinearDiscrimantAnalysis
#KNN
#Classification and Regression Trees
#Gaussian Naive Bayes
#SVM

models=[]
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(("LDA",LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC(gamma='auto')))
#Evaluatiing
results=[]
names=[]
for name,model in models:
    kfold=StratifiedKFold(n_splits=10,random_state=1)
    cv_results=cross_val_score(model,xtrain,ytrain,cv=kfold,scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s %f(%f)'%(name,cv_results.mean(),cv_results.std()))
#Comparing Models
pyplot.boxplot(results,labels=names)
pyplot.show()
#Making Prediction with Best Fit(SVM)
model=SVC(gamma='auto')
model.fit(xtrain,ytrain)
pred=model.predict(xtest)
#Accuracy Of Prediction

print(confusion_matrix(ytest,pred))
print(classification_report(ytest,pred))
